def jobSequencingWithDeadlines(jobs, n):
    # Sort the jobs in descending order of profit
    jobs.sort(key=lambda x: x[2], reverse=True)

    # The maximum deadline value
    max_deadline = max(job[1] for job in jobs)

    # Initialize the result array (all slots are free initially)
    result = [-1] * (max_deadline + 1)
    
    max_value = 0

    # Iterate through all jobs
    for job in jobs:
        # Try to find a free slot from the job's deadline to the start
        for j in range(job[1], 0, -1):
            if result[j] == -1:
                result[j] = job[0] # job name
                max_value += job[2] # job value
                break

    # Filter out the unassigned slots and return the job sequence
    return [job for job in result if job != -1], max_value

# Example usage
jobs = [('a', 2, 100), ('b', 1, 19), ('c', 2, 27), ('d', 1, 25), ('e', 3, 15)]
print(jobSequencingWithDeadlines(jobs, len(jobs)))