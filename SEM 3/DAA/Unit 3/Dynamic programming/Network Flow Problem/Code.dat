def ford_fulkerson(graph, source, sink):
    """
    Ford-Fulkerson algorithm to find the maximum flow in a network.
    
    :param graph: A 2D list representing the flow network graph where 
                  graph[u][v] is the capacity of the edge u -> v.
    :param source: The source vertex in the flow network.
    :param sink: The sink vertex in the flow network.
    :return: The maximum flow from source to sink.
    """
    parent = [-1] * len(graph)  # Array to store the path
    max_flow = 0

    def bfs(residual_graph):
        """
        Breadth-First Search to find an augmenting path in the residual graph.
        """
        visited = [False] * len(graph)
        queue = []

        queue.append(source)
        visited[source] = True

        while queue:
            u = queue.pop(0)

            for v, capacity in enumerate(residual_graph[u]):
                if not visited[v] and capacity > 0:
                    queue.append(v)
                    visited[v] = True
                    parent[v] = u

        return visited[sink]

    # Create residual graph
    residual_graph = [row[:] for row in graph]

    # Augment the flow while there is a path from source to sink
    while bfs(residual_graph):
        # Find minimum residual capacity of the edges along the path
        path_flow = float("inf")
        s = sink

        while s != source:
            path_flow = min(path_flow, residual_graph[parent[s]][s])
            s = parent[s]

        # Add path flow to overall flow
        max_flow += path_flow

        # Update residual capacities of the edges and reverse edges
        v = sink
        while v != source:
            u = parent[v]
            residual_graph[u][v] -= path_flow
            residual_graph[v][u] += path_flow
            v = parent[v]

    return max_flow

# Example usage
graph = [[0, 16, 13, 0, 0, 0],
         [0, 0, 10, 12, 0, 0],
         [0, 4, 0, 0, 14, 0],
         [0, 0, 9, 0, 0, 20],
         [0, 0, 0, 7, 0, 4],
         [0, 0, 0, 0, 0, 0]]
source = 0
sink = 5

max_flow = ford_fulkerson(graph, source, sink)
print("The maximum possible flow is", max_flow)
