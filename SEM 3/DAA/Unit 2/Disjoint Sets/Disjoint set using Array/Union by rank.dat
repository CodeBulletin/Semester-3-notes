class DisjointSet:
    def __init__(self, n):
        # Initialize the disjoint set with 'n' elements.
        self.parent = [i for i in range(n)]
        self.rank = [0] * n

    def find(self, element):
        # Find the representative (root) of the set containing 'element' with path compression.
        if self.parent[element] != element:
            self.parent[element] = self.find(self.parent[element])
        return self.parent[element]

    def union(self, x, y):
        # Union the sets containing elements 'x' and 'y' using rank to optimize the tree depth.
        root_x = self.find(x)
        root_y = self.find(y)

        if root_x != root_y:
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1