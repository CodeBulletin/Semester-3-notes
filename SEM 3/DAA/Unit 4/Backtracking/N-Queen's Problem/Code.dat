def Solver(n):
    board = [[0 for i in range(n)] for j in range(n)]  # Create a board of size n x n
    if nQueenSolver(board, 0, n) == False:  # if solution does not exist
        print("Solution does not exist")
        return False
    printSolution(board)   # if solution exists, print the board
    return True

def nQueenSolver(board, col, n):
    if col >= n:  # if all queens are placed
        return True
    for i in range(n):
        if isSafe(board, i, col, n):  # check if queen can be placed at board[i][col]
            board[i][col] = 1   # place the queen
            if nQueenSolver(board, col + 1, n) == True:  # recursively place rest of the queens
                return True
            board[i][col] = 0  # if queen cannot be placed, backtrack
    return False

def isSafe(board, row, col, n):
    for i in range(col):  # check if there is a queen in the same row
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):  # check if there is a queen in the upper left diagonal
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):  # check if there is a queen in the lower left diagonal
        if board[i][j] == 1:
            return False
    return True

def printSolution(board):
    for i in range(len(board)):
        for j in range(len(board)):
            print(board[i][j], end = " ")
        print()

Solver(8)

# Output:
# 1 0 0 0 0 0 0 0 
# 0 0 0 0 0 0 1 0 
# 0 0 0 0 1 0 0 0 
# 0 0 0 0 0 0 0 1 
# 0 1 0 0 0 0 0 0 
# 0 0 0 1 0 0 0 0 
# 0 0 0 0 0 1 0 0 
# 0 0 1 0 0 0 0 0 