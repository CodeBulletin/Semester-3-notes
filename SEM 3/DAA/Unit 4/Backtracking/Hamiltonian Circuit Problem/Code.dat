def hamiltonian_circuit(graph):
    n = len(graph)
    path = [-1] * n

    # Start from the first vertex and add it to the path
    path[0] = 0

    def is_valid(v, pos):
        # Check if current vertex and last vertex in path are adjacent
        if not graph[path[pos - 1]][v]:
            return False

        # Check if vertex has already been included in the path
        for i in range(pos):
            if path[i] == v:
                return False

        return True

    def hamiltonian_circuit_util(pos):
        # Base case: all vertices are included in the path
        if pos == n:
            # And if there is an edge from the last included vertex to the first
            if graph[path[pos - 1]][path[0]]:
                return True
            else:
                return False

        # Try different vertices as the next candidate in the Hamiltonian Circuit
        for v in range(1, n):
            if is_valid(v, pos):
                path[pos] = v
                if hamiltonian_circuit_util(pos + 1):
                    return True

                # Remove current vertex if it doesn't lead to a solution
                path[pos] = -1

        return False

    if hamiltonian_circuit_util(1):
        return path
    else:
        return None

# Example usage
graph = [[False, True, True, True],
         [True, False, True, False],
         [True, True, False, True],
         [True, False, True, False]]

solution = hamiltonian_circuit(graph)
print("Hamiltonian Circuit:" if solution else "No Hamiltonian Circuit", solution)